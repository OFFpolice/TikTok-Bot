import re
import os
import asyncio
from dotenv import load_dotenv
from os.path import join, dirname
from aiogram import Bot, Dispatcher, executor, types
from download import download_video


dotenv_path = join(dirname(__file__), '.env')
load_dotenv(dotenv_path)


channel_link = os.environ.get("channel_link")
channel_id = os.environ.get("channel_id")
bot_token = os.environ.get("bot_token")
bot = Bot(token=bot_token)
dp = Dispatcher(bot)
loop = asyncio.get_event_loop()


@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    help_button = types.InlineKeyboardButton("üÜò –ü–æ–º–æ—â—å", callback_data='help')
    markup.add(help_button)
    video_url = "https://t.me/AEh4oo/90"
    await bot.send_video(
        chat_id=message.chat.id,
        video=video_url,
        caption = f"<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.chat.first_name}!</b>\n\n<i>–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å</i> <b>¬´TikTok¬ª</b> <i>–±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞!</i>\n\n<i>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ</i> <b>¬´TikTok¬ª</b> <i>–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ!</i>",
        parse_mode='HTML',
        reply_markup=markup
    )
    await message.delete()


@dp.callback_query_handler(lambda c: c.data == 'help')
async def process_help_callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    markup = types.InlineKeyboardMarkup(row_width=1)
    back_button = types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')
    markup.add(back_button)
    await bot.edit_message_caption(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        caption="<b>‚ÅâÔ∏è –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã ¬´TikTok¬ª –±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞, –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–ª–µ–¥–æ–≤–∞—Ç—å —ç—Ç–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>\n\n<b>1. –î–ª—è —ç—Ç–æ–≥–æ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ¬´TikTok¬ª –Ω–∞–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–µ –≤–∞—Å –≤–∏–¥–µ–æ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è¬ª.</b>\n<i>–ó–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é ¬´–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É¬ª.</i>\n<b>2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É —á–∞—Ç-–±–æ—Ç—É.</b>\n<i>–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤ –ø–æ–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É.</i>\n<b>3. –ë–æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –≤–∞–º –≤–∏–¥–µ–æ –±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞.</b>\n<b><i>–†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω (20–ú–±)</i></b>.\n\n<b>–ü—Ä–∏–º–µ—Ä —Å—Å—ã–ª–∫–∏:</b>\n<code>https://vm.tiktok.com/ZM6LSsUHv/</code>\n\n<b>‚ÄºÔ∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä—Å–∫–∏–º –ø—Ä–∞–≤–æ–º, –±–µ–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —è–≤–ª—è–µ—Ç—Å—è —É–≥–æ–ª–æ–≤–Ω—ã–º –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º.\n‚ÄºÔ∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–≥—Ä—É–∂–∞–µ—Ç–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç, –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –∫–æ—Ç–æ—Ä–æ–≥–æ —É –≤–∞—Å –µ—Å—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ.</b>\n\n<b>–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º:</b> <i>OFFpolice.t.me</i>",
        parse_mode='HTML',
        reply_markup=markup
    )


@dp.callback_query_handler(lambda c: c.data == 'back')
async def process_back_callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    markup = types.InlineKeyboardMarkup(row_width=1)
    help_button = types.InlineKeyboardButton("üÜò –ü–æ–º–æ—â—å", callback_data='help')
    markup.add(help_button)
    await bot.edit_message_caption(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        caption=f'<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {callback_query.from_user.first_name}!</b>\n\n<i>–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∏–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å</i> <b>¬´TikTok¬ª</b> <i>–±–µ–∑ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞!</i>\n\n<i>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ</i> <b>¬´TikTok¬ª</b> <i>–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ!</i>',
        parse_mode='HTML',
        reply_markup=markup
    )


@dp.message_handler(content_types=['text'])
async def content_download(message: types.Message):
    if re.compile('https://[a-zA-Z]+.tiktok.com/').match(message.text):
        channel_member = await bot.get_chat_member(channel_id, message.chat.id)
        if channel_member.status == "left":
            status_button = types.InlineKeyboardMarkup()
            status_button.add(
                types.InlineKeyboardButton(
                    text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è',
                    url=channel_link
                )
            )
            status_button.row(
                types.InlineKeyboardButton(
                    text='–ü—Ä–æ–≤–µ—Ä–∫–∞',
                    callback_data='check_subscription'
                )
            )
            photo_url = 'https://t.me/AEh4oo/92'
            await bot.send_photo(
                chat_id=message.chat.id,
                photo=photo_url,
                caption='<b>üîí –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!\n\n–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∫–∞¬ª.\n–ó–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å!</b>',
                parse_mode='HTML',
                reply_markup=status_button
            )
            await message.delete()
            return
        try:
            message_sticker = await bot.send_sticker(
                chat_id=message.chat.id,
                sticker="CAACAgIAAxkBAAEKWoNlDJQS5NC4E5JSVNak8UrkQVyizQACPAMAArVx2gYlKhrraLRZjDAE"
            )
            processing = await bot.send_message(
                chat_id=message.chat.id,
                text=f'<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ!\n<a href="{message.text}">–í–∏–¥–µ–æ—Ä–æ–ª–∏–∫</a> –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è... ‚åõÔ∏è‚è≥‚åõÔ∏è‚è≥</b>',
                parse_mode='HTML'
            )
            video_url, likes, comments, repost, views, description, channel_url, channel_name = await download_video(message.text)
            url_button = types.InlineKeyboardMarkup()
            url_button.add(
                types.InlineKeyboardButton(
                    text='üåÄ Shazam Bot',
                    url='https://telegram.me/OFFpoliceShazamBot?start=TikTokBot'
                )
            )
            await bot.send_chat_action(
                message.chat.id,
                "upload_video"
            )
            await bot.send_video(
                chat_id=message.chat.id,
                video=video_url,
                caption=f"{description}\n\n<b>üë§ –ê–≤—Ç–æ—Ä:</b> <a href='{channel_url}'>{channel_name}</a>\n<b>üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:</b> <code>{views}</code>\n<b>‚ù§Ô∏è –õ–∞–π–∫–æ–≤:</b> <code>{likes}</code>\n<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:</b> <code>{comments}</code>\n<b>üîÅ –ü–æ–¥–µ–ª–∏–ª–∏—Å—å:</b> <code>{repost}</code>\n<b>üìπ –û—Ç–∫—Ä—ã—Ç—å –≤</b> <a href='{message.text}'>TikTok</a>\n\n<b>üÜî: @SaveTikTokVideoBot</b>",
                parse_mode='HTML',
                reply_markup=url_button
            )
            await bot.delete_message(
                chat_id=message.chat.id,
                message_id=message.message_id
            )
            await bot.delete_message(
                chat_id=message.chat.id,
                message_id=message_sticker.message_id
            )
            await bot.delete_message(
                chat_id=message.chat.id,
                message_id=processing.message_id
            )
        except Exception as e:
            await bot.send_message(
                chat_id=message.chat.id,
                text=f'‚Äç<b>üõë –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è!</b>\n\n<a href="{message.text}">–≠—Ç–æ—Ç –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫</a> –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ!\n\n<b>üòµ –û—à–∏–±–∫–∞:</b> {e}\n\n<b>üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ:</b>\n<code>{message.text}</code>',
                parse_mode='HTML'
            )
            print(e)
            await bot.delete_message(
                chat_id=message.chat.id,
                message_id=message.message_id
            )
            await bot.delete_message(
                chat_id=message.chat.id,
                message_id=message_sticker.message_id
            )
            await bot.delete_message(
                chat_id=message.chat.id,
                message_id=processing.message_id
            )
    else:
        message_tiktok = await bot.send_message(
            chat_id=message.chat.id,
            text="<b>–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ üîó—Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ ¬´TikTok¬ª!</b>",
            parse_mode='HTML'
        )
        await message.delete()
        await asyncio.sleep(5)
        await bot.delete_message(
            chat_id=message.chat.id,
            message_id=message_tiktok.message_id
        )


@dp.callback_query_handler(lambda query: query.data == 'check_subscription')
async def check_subscription(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    try:
        channel_member = await bot.get_chat_member(channel_id, user_id)
        if channel_member.status == "member":
            await bot.answer_callback_query(
                callback_query.id,
                text="üü¢ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç!\nü•∞ –°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å!\n\nüòá –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å:)",
                show_alert=True
            )
            await bot.delete_message(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id
            )
        else:
            await bot.answer_callback_query(
               callback_query.id,
               text="üî¥ –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª!",
               show_alert=True
           )
    except Exception as e:
        print(e)


if __name__ == '__main__':
    asyncio.run(executor.start_polling(dp, skip_updates=True))
